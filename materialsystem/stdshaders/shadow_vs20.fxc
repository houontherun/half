//	STATIC: "FOG_TYPE"				"0..1"

//#define USE_CONDITIONALS

#include "common_vs_fxc.h"

static const int g_FogType			= FOG_TYPE;

const float4 cBaseTexCoordTransform[2]			:  register( c90 );
const float4 cTextureJitter[2]					: register( c92 );

struct VS_INPUT
{
	// This is all of the stuff that we ever use.
	float4 vPos				: POSITION;
	float4 vColor			: COLOR0;
	float4 vTexCoord0		: TEXCOORD0;
};

struct VS_OUTPUT
{
    float4 projPos					: POSITION;	
	float  fog						: FOG;
	float2 texCoord0				: TEXCOORD0;
	float2 texCoord1				: TEXCOORD1;
	float2 texCoord2				: TEXCOORD2;
	float2 texCoord3				: TEXCOORD3;
	float2 texCoord4				: TEXCOORD4;
	float4 shadowColor				: COLOR0;
};

VS_OUTPUT main( const VS_INPUT v )
{
	VS_OUTPUT o = ( VS_OUTPUT )0;

	float3 worldNormal, worldPos;
	float2 texCoord;
	worldPos = mul( v.vPos, cModel[0] );
	float4 projPos = mul( float4( worldPos, 1 ), cViewProj );
	o.projPos = projPos;
	o.fog = CalcFog( worldPos, projPos, g_FogType );
	o.shadowColor = v.vColor;

	texCoord.x = dot( v.vTexCoord0, cBaseTexCoordTransform[0] );
	texCoord.y = dot( v.vTexCoord0, cBaseTexCoordTransform[1] );

	o.texCoord0.xy = texCoord;
	o.texCoord1.xy = texCoord + cTextureJitter[0];
	o.texCoord2.xy = texCoord - cTextureJitter[0];
	o.texCoord3.xy = texCoord + cTextureJitter[1];
	o.texCoord4.xy = texCoord - cTextureJitter[1];

	return o;
}


